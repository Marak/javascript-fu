/*************** AUTOGENERATED @ 1274258438286 ***************
    WARNING: THIS FILE WAS AUTOGENERATED BY THE FORMAT BUILD SCRIPT
    MODIFYING THIS FILE IS FINE, BUT YOU REALLY SHOULD BE MODIFYING 
    THE LIBRARY DIRECTLY AND REGENERATING THIS FILE USING BUILD.js!!!!
    format.js - Written by Marak Squires
 
*/
var format = {};
format.version = "0.0.1";
format.types = {};
format.types.isType = function (){
  
};

format.types.isNumber = function ( numbery ){
  
  if(numbery.toString() == 'NaN'){
    return false;  
  }
  if(numbery instanceof Number){
    return true; 
  }
  else{
    return false;
  }
  
};

format.types.isText = function (){
  
};

format.types.isDate = function (){
  
};

format.types.isArray = function (){
  
};

format.types.isInflector = function (){
  
};

format.types.isString = function (){
  
};

format.types.isJSON = function (){
  
};

format.types.isAssociativeArray = function (){
  
};

format.inflector = {};
format.inflector.camelize = function (){};

format.inflector.classify = function (){};

format.inflector.constantize = function (){};

format.inflector.dasherize = function (){};

format.inflector.demodulize = function (){};

format.inflector.foreign_key = function (){};

format.inflector.humanize = function (){};

format.inflector.inflections = function (){};

format.inflector.ordinalize = function (){};

format.inflector.pluralize = function ( str ){};

format.inflector.singularize = function (){};

format.inflector.tableize = function (){};

format.inflector.titleize = function (){};

format.inflector.underscore = function (){};

format.number = {};
format.number.toNumber = function (numbery){
  
  var n = numbery;
  n = n.toString();
  n = n.replace( /\,/g, '' );
  n = n.replace( /\$/g, '' ); // replace with format.currency.toCurrency call
  n =  new Number(n);

  if(n.toString() == 'NaN'){
    return false;
  }
  else{
    return n;
    
  }
};

format.number.toPercent = function (number){
  // TODO: add more stripping and formatting logic
  return number;
};

format.string = {};
format.string.stripNumbers = function ( str ){
  return str.replace(/[^A-Za-z]/g, "");
};

format.string.getNumbers = function ( str ){
  var result = str.match(/\d+/g)
  
  str = '';
  
  for(s in result){
    str += result[s];   
  }
  
  sys.puts(str);
  
  return str;
  

};

format.string.stripLetters = function ( str ){
  return 
};

format.string.getLetters = function ( str ){
  
};

format.date = {};
format.date.toDate = function (datey){
  // TODO: add more stripping and formatting logic
  return timey;
};

format.date.getMonthNumberFromName = function (datey){
 var n=exports.CultureInfo.monthNames,m=exports.CultureInfo.abbreviatedMonthNames,s=datey.toLowerCase();
 for(var i=0;i<n.length;i++){
   if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){
     return i;
     }
    }
  return-1;
};

format.date.getDayNumberFromName = function (name){var n=exports.CultureInfo.dayNames,m=exports.CultureInfo.abbreviatedDayNames,o=exports.CultureInfo.shortestDayNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};

format.date.CultureInfo = 
CultureInfo.name = {};
CultureInfo.name.0 = e;

CultureInfo.name.1 = n;

CultureInfo.name.2 = -;

CultureInfo.name.3 = U;

CultureInfo.name.4 = S;

CultureInfo.englishName = {};
CultureInfo.nativeName = {};
CultureInfo.dayNames = {};
CultureInfo.dayNames.0 = Sunday;

CultureInfo.dayNames.1 = Monday;

CultureInfo.dayNames.2 = Tuesday;

CultureInfo.dayNames.3 = Wednesday;

CultureInfo.dayNames.4 = Thursday;

CultureInfo.dayNames.5 = Friday;

CultureInfo.dayNames.6 = Saturday;

CultureInfo.abbreviatedDayNames = {};
CultureInfo.abbreviatedDayNames.0 = Sun;

CultureInfo.abbreviatedDayNames.1 = Mon;

CultureInfo.abbreviatedDayNames.2 = Tue;

CultureInfo.abbreviatedDayNames.3 = Wed;

CultureInfo.abbreviatedDayNames.4 = Thu;

CultureInfo.abbreviatedDayNames.5 = Fri;

CultureInfo.abbreviatedDayNames.6 = Sat;

CultureInfo.shortestDayNames = {};
CultureInfo.shortestDayNames.0 = Su;

CultureInfo.shortestDayNames.1 = Mo;

CultureInfo.shortestDayNames.2 = Tu;

CultureInfo.shortestDayNames.3 = We;

CultureInfo.shortestDayNames.4 = Th;

CultureInfo.shortestDayNames.5 = Fr;

CultureInfo.shortestDayNames.6 = Sa;

CultureInfo.firstLetterDayNames = {};
CultureInfo.firstLetterDayNames.0 = S;

CultureInfo.firstLetterDayNames.1 = M;

CultureInfo.firstLetterDayNames.2 = T;

CultureInfo.firstLetterDayNames.3 = W;

CultureInfo.firstLetterDayNames.4 = T;

CultureInfo.firstLetterDayNames.5 = F;

CultureInfo.firstLetterDayNames.6 = S;

CultureInfo.monthNames = {};
CultureInfo.monthNames.0 = January;

CultureInfo.monthNames.1 = February;

CultureInfo.monthNames.2 = March;

CultureInfo.monthNames.3 = April;

CultureInfo.monthNames.4 = May;

CultureInfo.monthNames.5 = June;

CultureInfo.monthNames.6 = July;

CultureInfo.monthNames.7 = August;

CultureInfo.monthNames.8 = September;

CultureInfo.monthNames.9 = October;

CultureInfo.monthNames.10 = November;

CultureInfo.monthNames.11 = December;

CultureInfo.abbreviatedMonthNames = {};
CultureInfo.abbreviatedMonthNames.0 = Jan;

CultureInfo.abbreviatedMonthNames.1 = Feb;

CultureInfo.abbreviatedMonthNames.2 = Mar;

CultureInfo.abbreviatedMonthNames.3 = Apr;

CultureInfo.abbreviatedMonthNames.4 = May;

CultureInfo.abbreviatedMonthNames.5 = Jun;

CultureInfo.abbreviatedMonthNames.6 = Jul;

CultureInfo.abbreviatedMonthNames.7 = Aug;

CultureInfo.abbreviatedMonthNames.8 = Sep;

CultureInfo.abbreviatedMonthNames.9 = Oct;

CultureInfo.abbreviatedMonthNames.10 = Nov;

CultureInfo.abbreviatedMonthNames.11 = Dec;

CultureInfo.amDesignator = {};
CultureInfo.pmDesignator = {};
CultureInfo.firstDayOfWeek = {};
CultureInfo.firstDayOfWeek._dateElement = day;

CultureInfo.firstDayOfWeek.fromNow = function (){var c={};c[this._dateElement]=this;return exports.now().add(c);};

CultureInfo.firstDayOfWeek.ago = function (){var c={};c[this._dateElement]=this*-1;return exports.now().add(c);};

CultureInfo.firstDayOfWeek.milliseconds = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.millisecond = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.seconds = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.second = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.minutes = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.minute = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.hours = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.hour = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.days = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.day = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.weeks = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.week = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.months = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.month = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.years = function (){this._dateElement=n;return this;};

CultureInfo.firstDayOfWeek.year = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax = {};
CultureInfo.twoDigitYearMax._dateElement = day;

CultureInfo.twoDigitYearMax.fromNow = function (){var c={};c[this._dateElement]=this;return exports.now().add(c);};

CultureInfo.twoDigitYearMax.ago = function (){var c={};c[this._dateElement]=this*-1;return exports.now().add(c);};

CultureInfo.twoDigitYearMax.milliseconds = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.millisecond = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.seconds = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.second = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.minutes = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.minute = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.hours = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.hour = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.days = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.day = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.weeks = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.week = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.months = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.month = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.years = function (){this._dateElement=n;return this;};

CultureInfo.twoDigitYearMax.year = function (){this._dateElement=n;return this;};

CultureInfo.dateElementOrder = {};
CultureInfo.formatPatterns = {};
CultureInfo.formatPatterns.shortDate = M/d/yyyy;

CultureInfo.formatPatterns.longDate = dddd, MMMM dd, yyyy;

CultureInfo.formatPatterns.shortTime = h:mm tt;

CultureInfo.formatPatterns.longTime = h:mm:ss tt;

CultureInfo.formatPatterns.fullDateTime = dddd, MMMM dd, yyyy h:mm:ss tt;

CultureInfo.formatPatterns.sortableDateTime = yyyy-MM-ddTHH:mm:ss;

CultureInfo.formatPatterns.universalSortableDateTime = yyyy-MM-dd HH:mm:ssZ;

CultureInfo.formatPatterns.rfc1123 = ddd, dd MMM yyyy HH:mm:ss GMT;

CultureInfo.formatPatterns.monthDay = MMMM dd;

CultureInfo.formatPatterns.yearMonth = MMMM, yyyy;

CultureInfo.regexPatterns = {};
CultureInfo.regexPatterns.jan = /^jan(uary)?/i;

CultureInfo.regexPatterns.feb = /^feb(ruary)?/i;

CultureInfo.regexPatterns.mar = /^mar(ch)?/i;

CultureInfo.regexPatterns.apr = /^apr(il)?/i;

CultureInfo.regexPatterns.may = /^may/i;

CultureInfo.regexPatterns.jun = /^jun(e)?/i;

CultureInfo.regexPatterns.jul = /^jul(y)?/i;

CultureInfo.regexPatterns.aug = /^aug(ust)?/i;

CultureInfo.regexPatterns.sep = /^sep(t(ember)?)?/i;

CultureInfo.regexPatterns.oct = /^oct(ober)?/i;

CultureInfo.regexPatterns.nov = /^nov(ember)?/i;

CultureInfo.regexPatterns.dec = /^dec(ember)?/i;

CultureInfo.regexPatterns.sun = /^su(n(day)?)?/i;

CultureInfo.regexPatterns.mon = /^mo(n(day)?)?/i;

CultureInfo.regexPatterns.tue = /^tu(e(s(day)?)?)?/i;

CultureInfo.regexPatterns.wed = /^we(d(nesday)?)?/i;

CultureInfo.regexPatterns.thu = /^th(u(r(s(day)?)?)?)?/i;

CultureInfo.regexPatterns.fri = /^fr(i(day)?)?/i;

CultureInfo.regexPatterns.sat = /^sa(t(urday)?)?/i;

CultureInfo.regexPatterns.future = /^next/i;

CultureInfo.regexPatterns.past = /^last|past|prev(ious)?/i;

CultureInfo.regexPatterns.add = /^(\+|after|from)/i;

CultureInfo.regexPatterns.subtract = /^(\-|before|ago)/i;

CultureInfo.regexPatterns.yesterday = /^yesterday/i;

CultureInfo.regexPatterns.today = /^t(oday)?/i;

CultureInfo.regexPatterns.tomorrow = /^tomorrow/i;

CultureInfo.regexPatterns.now = /^n(ow)?/i;

CultureInfo.regexPatterns.millisecond = /^ms|milli(second)?s?/i;

CultureInfo.regexPatterns.second = /^sec(ond)?s?/i;

CultureInfo.regexPatterns.minute = /^min(ute)?s?/i;

CultureInfo.regexPatterns.hour = /^h(ou)?rs?/i;

CultureInfo.regexPatterns.week = /^w(ee)?k/i;

CultureInfo.regexPatterns.month = /^m(o(nth)?s?)?/i;

CultureInfo.regexPatterns.day = /^d(ays?)?/i;

CultureInfo.regexPatterns.year = /^y((ea)?rs?)?/i;

CultureInfo.regexPatterns.shortMeridian = /^(a|p)/i;

CultureInfo.regexPatterns.longMeridian = /^(a\.?m?\.?|p\.?m?\.?)/i;

CultureInfo.regexPatterns.timezone = /^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i;

CultureInfo.regexPatterns.ordinalSuffix = /^\s*(st|nd|rd|th)/i;

CultureInfo.regexPatterns.timeContext = /^\s*(\:|a|p)/i;

CultureInfo.abbreviatedTimeZoneStandard = {};
CultureInfo.abbreviatedTimeZoneStandard.GMT = -000;

CultureInfo.abbreviatedTimeZoneStandard.EST = -0400;

CultureInfo.abbreviatedTimeZoneStandard.CST = -0500;

CultureInfo.abbreviatedTimeZoneStandard.MST = -0600;

CultureInfo.abbreviatedTimeZoneStandard.PST = -0700;

CultureInfo.abbreviatedTimeZoneDST = {};
CultureInfo.abbreviatedTimeZoneDST.GMT = -000;

CultureInfo.abbreviatedTimeZoneDST.EDT = -0500;

CultureInfo.abbreviatedTimeZoneDST.CDT = -0600;

CultureInfo.abbreviatedTimeZoneDST.MDT = -0700;

CultureInfo.abbreviatedTimeZoneDST.PDT = -0800;

format.date.isLeapYear = function (year){return(((year%4===0)&&(year%100!==0))||(year%400===0));};

format.date.getDaysInMonth = function (year,month){return[31,(exports.isLeapYear(year)?29:28),31,30,31,30,31,31,30,31,30,31][month];};

format.date.getTimezoneOffset = function (s,dst){return(dst||false)?exports.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()]:exports.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];};

format.date.getTimezoneAbbreviation = function (offset,dst){var n=(dst||false)?exports.CultureInfo.abbreviatedTimeZoneDST:exports.CultureInfo.abbreviatedTimeZoneStandard,p;for(p in n){if(n[p]===offset){return p;}}
return null;};

format.date._validate = function (value,min,max,name){if(typeof value!="number"){throw new TypeError(value+" is not a Number.");}else if(value<min||value>max){throw new RangeError(value+" is not a valid value for "+name+".");}
return true;};

format.date.validateMillisecond = function (n){return exports._validate(n,0,999,"milliseconds");};

format.date.validateSecond = function (n){return exports._validate(n,0,59,"seconds");};

format.date.validateMinute = function (n){return exports._validate(n,0,59,"minutes");};

format.date.validateHour = function (n){return exports._validate(n,0,23,"hours");};

format.date.validateDay = function (n,year,month){return exports._validate(n,1,exports.getDaysInMonth(year,month),"days");};

format.date.validateMonth = function (n){return exports._validate(n,0,11,"months");};

format.date.validateYear = function (n){return exports._validate(n,1,9999,"seconds");};

format.date.now = function (){return new Date();};

format.date.today = function (){return exports.now().clearTime();};

format.date.Parsing = 
Parsing.Exception = {};
Parsing.Operators = {};
Parsing.Operators.rtoken = function (r){return function(s){var mx=s.match(r);if(mx){return([mx[0],s.substring(mx[0].length)]);}else{throw new $P.Exception(s);}};};

Parsing.Operators.token = function (s){return function(s){return _.rtoken(new RegExp("^\s*"+s+"\s*"))(s);};};

Parsing.Operators.stoken = function (s){return _.rtoken(new RegExp("^"+s));};

Parsing.Operators.until = function (p){return function(s){var qx=[],rx=null;while(s.length){try{rx=p.call(this,s);}catch(e){qx.push(rx[0]);s=rx[1];continue;}
break;}
return[qx,s];};};

Parsing.Operators.many = function (p){return function(s){var rx=[],r=null;while(s.length){try{r=p.call(this,s);}catch(e){return[rx,s];}
rx.push(r[0]);s=r[1];}
return[rx,s];};};

Parsing.Operators.optional = function (){var args=null,rx=[];if(arguments.length>1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i<px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};

Parsing.Operators.not = function (){var args=null,rx=[];if(arguments.length>1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i<px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};

Parsing.Operators.ignore = function (){var args=null,rx=[];if(arguments.length>1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i<px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};

Parsing.Operators.product = function (){var px=arguments[0],qx=Array.prototype.slice.call(arguments,1),rx=[];for(var i=0;i<px.length;i++){rx.push(_.each(px[i],qx));}
return rx;};

Parsing.Operators.cache = function (){var args=null,rx=[];if(arguments.length>1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i<px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};

Parsing.Operators.any = function (){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};

Parsing.Operators.each = function (){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};

Parsing.Operators.all = function (){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};

Parsing.Operators.sequence = function (px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;if(px.length==1){return px[0];}
return function(s){var r=null,q=null;var rx=[];for(var i=0;i<px.length;i++){try{r=px[i].call(this,s);}catch(e){break;}
rx.push(r[0]);try{q=d.call(this,r[1]);}catch(ex){q=null;break;}
s=q[1];}
if(!r){throw new $P.Exception(s);}
if(q){throw new $P.Exception(q[1]);}
if(c){try{r=c.call(this,r[1]);}catch(ey){throw new $P.Exception(r[1]);}}
return[rx,(r?r[1]:s)];};};

Parsing.Operators.between = function (d1,p,d2){d2=d2||d1;var _fn=_.each(_.ignore(d1),p,_.ignore(d2));return function(s){var rx=_fn.call(this,s);return[[rx[0][0],r[0][2]],rx[1]];};};

Parsing.Operators.list = function (p,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return(p instanceof Array?_.each(_.product(p.slice(0,-1),_.ignore(d)),p.slice(-1),_.ignore(c)):_.each(_.many(_.each(p,_.ignore(d))),px,_.ignore(c)));};

Parsing.Operators.set = function (px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return function(s){var r=null,p=null,q=null,rx=null,best=[[],s],last=false;for(var i=0;i<px.length;i++){q=null;p=null;r=null;last=(px.length==1);try{r=px[i].call(this,s);}catch(e){continue;}
rx=[[r[0]],r[1]];if(r[1].length>0&&!last){try{q=d.call(this,r[1]);}catch(ex){last=true;}}else{last=true;}
if(!last&&q[1].length===0){last=true;}
if(!last){var qx=[];for(var j=0;j<px.length;j++){if(i!=j){qx.push(px[j]);}}
p=_.set(qx,d).call(this,q[1]);if(p[0].length>0){rx[0]=rx[0].concat(p[0]);rx[1]=p[1];}}
if(rx[1].length<best[1].length){best=rx;}
if(best[1].length===0){break;}}
if(best[0].length===0){return best;}
if(c){try{q=c.call(this,best[1]);}catch(ey){throw new $P.Exception(best[1]);}
best[1]=q[1];}
return best;};};

Parsing.Operators.forward = function (gr,fname){return function(s){return gr[fname].call(this,s);};};

Parsing.Operators.replace = function (rule,repl){return function(s){var r=rule.call(this,s);return[repl,r[1]];};};

Parsing.Operators.process = function (rule,fn){return function(s){var r=rule.call(this,s);return[fn.call(this,r[0]),r[1]];};};

Parsing.Operators.min = function (min,rule){return function(s){var rx=rule.call(this,s);if(rx[0].length<min){throw new $P.Exception(s);}
return rx;};};

format.date.Grammar = 
Grammar.datePartDelimiter = {};
Grammar.timePartDelimiter = {};
Grammar.whiteSpace = {};
Grammar.generalDelimiter = {};
Grammar.ctoken = {};
Grammar.ctoken2 = {};
Grammar.h = {};
Grammar.hh = {};
Grammar.H = {};
Grammar.HH = {};
Grammar.m = {};
Grammar.mm = {};
Grammar.s = {};
Grammar.ss = {};
Grammar.hms = {};
Grammar.t = {};
Grammar.tt = {};
Grammar.z = {};
Grammar.zz = {};
Grammar.zzz = {};
Grammar.timeSuffix = {};
Grammar.time = {};
Grammar.d = {};
Grammar.dd = {};
Grammar.dddd = {};
Grammar.ddd = {};
Grammar.M = {};
Grammar.MM = {};
Grammar.MMMM = {};
Grammar.MMM = {};
Grammar.y = {};
Grammar.yy = {};
Grammar.yyy = {};
Grammar.yyyy = {};
Grammar.day = {};
Grammar.month = {};
Grammar.year = {};
Grammar.orientation = {};
Grammar.operator = {};
Grammar.rday = {};
Grammar.unit = {};
Grammar.value = {};
Grammar.expression = {};
Grammar.mdy = {};
Grammar.ymd = {};
Grammar.dmy = {};
Grammar.date = {};
Grammar.format = {};
Grammar.formats = {};
Grammar._formats = {};
Grammar._start = {};
Grammar.start = {};
format.date.Translator = 
Translator.hour = {};
Translator.minute = {};
Translator.second = {};
Translator.meridian = {};
Translator.timezone = {};
Translator.day = {};
Translator.month = {};
Translator.year = {};
Translator.rday = {};
Translator.finishExact = {};
Translator.finish = {};
format.date._parse = fiiii;

format.date.parse = function (s){var r=null;if(!s){return null;}
try{r=exports.Grammar.start.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};

format.date.getParseFunction = function (fx){var fn=exports.Grammar.formats(fx);return function(s){var r=null;try{r=fn.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};};

format.date.parseExact = function (s,fx){return exports.getParseFunction(fx)(s);};

format.time = {};
format.time.toTime = function (timey){
  // TODO: add more stripping and formatting logic
  return timey;
};

format.time.toSeconds = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.time.toMinutes = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.time.toHours = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.time.toDays = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.time.toMonths = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.time.toYears = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.currency = {};
format.currency.toDollars = function (money){
  // TODO: add more stripping and formatting logic
  return money;
};

format.currency.toPennies = function (money){
    // TODO: add more stripping and formatting logic
    return money;
  };

format.currency.toNickels = function (money){
    // TODO: add more stripping and formatting logic
    return money;
  };

format.currency.toDimes = function (money){
    // TODO: add more stripping and formatting logic
    return money;
  };

format.currency.toQuarters = function (money){
    // TODO: add more stripping and formatting logic
    return money;
  };

format.currency.toEuros = function (money){
  // TODO: add more stripping and formatting logic
  return money;
};

format.currency.toCanadian = function (money){
  // TODO: add more stripping and formatting logic
  return money;
};
if(typeof exports != "undefined"){for(var prop in format){exports[prop] = format[prop];}}