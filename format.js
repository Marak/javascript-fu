/*************** AUTOGENERATED @ 1274512286867 ***************
    WARNING: THIS FILE WAS AUTOGENERATED BY THE FORMAT BUILD SCRIPT
    MODIFYING THIS FILE IS FINE, BUT YOU REALLY SHOULD BE MODIFYING 
    THE LIBRARY DIRECTLY AND REGENERATING THIS FILE USING BUILD.js!!!!
    format.js - Written by Marak Squires
 
*/
var format = {};
format.version = "0.0.1";
format.types = {};
format.types.isDefined = function ( objecty ){
  if(typeof objecty == 'undefined'){
    return false;
  }
  if(objecty == null || objecty == 'null'){
    return false;
  }
  if(objecty.toString() == 'NaN'){
    return false;  
  }
};

format.types.isNumber = function ( numbery ){
  if(numbery.toString() == 'NaN'){
    return false;  
  }
  if(numbery instanceof Number){
    return true; 
  }
  else{
    return false;
  }
};

format.types.isString = function ( stringy ){
  return (stringy instanceof String);
};

format.types.isText = function ( texty ){

};

format.types.isDate = function ( datey ){
  return (datey instanceof Date);
};

format.types.isTime = function ( timey ){
  
};

format.types.isArray = function (){
  
};

format.types.isInflector = function (){
  
};

format.types.isJSON = function (){
  
};

format.types.isObject = function (){
  
};

format.string = {};
format.string.stripNumbers = function ( str ){
  return str.replace(/[^A-Za-z]/g, "");
};

format.string.getNumbers = function ( str ){
  return str.replace(/[^\d]/g, "");
};

format.string.stripLetters = function ( str ){
  return;
};

format.string.getLetters = function ( str ){
  
};

format.string.wordWrap = function ( m, b, c ){
  
      var i, j, l, s, r;
      if(m < 1)
          return this;
      for(i = -1, l = (r = this.split("\n")).length; ++i < l; r[i] += s)
          for(s = r[i], r[i] = ""; s.length > m; r[i] += s.slice(0, j) + ((s = s.slice(j)).length ? b : ""))
              j = c == 2 || (j = s.slice(0, m + 1).match(/\S*(\s)?$/))[1] ? m : j.input.length - j[0].length
              || c == 1 && m || j.input.length + (j = s.slice(m).match(/^\S*/)).input.length;
      return r.join("\n");
  
};

format.string.trim = function ( str ){
  return str;
};

format.string.left = function ( str, n ){
  return str;
};

format.string.right = function ( str, n ){
  return str;
};

format.string.toQueryParams = function ( str ){
  return str;
};

format.string.linkify = function ( str ){
  return str.replace(/(^|\s)((?:f|ht)tps?:\/\/[^\s]+)/g, replacement || '$1<a href="$2">$2</a>');;
};

format.number = {};
format.number.toNumber = function (numbery){
  
  var n = numbery;
  n = n.toString();
  n = n.replace( /\,/g, '' );
  n = n.replace( /\$/g, '' ); // replace with format.currency.toCurrency call
  n =  new Number(n);

  if(n.toString() == 'NaN'){
    return false;
  }
  else{
    return n;
    
  }
};

format.number.toExponential = function (){};

format.number.toFixed = function (){};

format.number.toPercent = function (number){
  // TODO: add more stripping and formatting logic
  return number;
};

format.number.toBase = function ( number ){
  
  Number.prototype.toBase = function(b, c){
      var s = "", n = this;
      if(b > (c = (c || "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz").split("")).length || b < 2) return "";
      while(n)
          s = c[n % b] + s, n = Math.floor(n / b);
      return s;
  };
  String.prototype.parseInt = function(b, c){
      var s = 0, n, l = (n = this.split("")).length, i = 0;
      if(b > (c = c || "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz").length || b < 2) return NaN;
      while(l--)
          s += c.indexOf(n[i++]) * Math.pow(b, l);
      return s;
  };
  
};

format.inflector = {};
format.inflector.camelize = function (str) {
  return exports.titleize(str).replace(/[^\w]/, '');
};

format.inflector.classify = function () {};

format.inflector.constantize = function (str) {
  return eval(str); //this is evil and prevents chaining
};

format.inflector.dasherize = function (str) {
  str = str.replace(/_/g, '-');
  return str;
};

format.inflector.demodulize = function () {};

format.inflector.foreign_key = function () {};

format.inflector.humanize = function (str) {
  str = str.replace(/_id$/, "").replace(/_/, " ");
  return str.charAt(0).toUpperCase() + str.slice(1);
};

format.inflector.ordinalize = function () {};

format.inflector.tableize = function () {};

format.inflector.titleize = function (str) {

  str = exports.underscore(str);
  str = exports.humanize(str);
  
	var parts = str.split(/\b('?[a-z])/);
	str = '';

	for (var i = 0; i < parts.length; i = i + 1) {
		if ((i % 2) === 0) {
			str = str + parts[i];
		} else {
			str = str + parts[i].charAt(0).toUpperCase() + parts[i].slice(1);
		}
	};

	return str;
};

format.inflector.underscore = function (str) {
	str = str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2');
	str = str.replace(/([a-z\d])([A-Z])/g, '$1_$2').replace(/-/g, "_");
	str = str.toLowerCase();
	return str;
};

format.inflector.pluralize = function (str) {
	for (var i = inflections.uncountables.length - 1; i >= 0; i--) {
		if (str.match(inflections.uncountables[i])) return str;
	};

	var pairs = inflections.plurals,
		pair = [];

	//go from the end of the array to the front so the last pairs have priority
	for (i = pairs.length - 1; i >= 0; i--) {
		pair = pairs[i];
		var result = str.replace(pair[0], pair[1]);
		if (result === str) {
			continue;
		} else return result;
	};

	return str.replace(/([^s])$/i, '$1s');
};

format.inflector.singularize = function (str) {
	for (var u = inflections.uncountables.length - 1; u >= 0; u--) {
		if (str.match(inflections.uncountables[u])) return str;
	};

	var pairs = inflections.singulars,
		pair = [];

	//go from the end of the array to the front so the last pairs have priority
	for (var i = pairs.length - 1; i >= 0; i--) {
		pair = pairs[i];
		var result = str.replace(pair[0], pair[1]);
		if (result === str) {
			continue;
		} else return result;
	};

	return str.replace(/s$/i, '');
};

format.date = {};
format.date.toDate = function (datey){
  // TODO: add more stripping and formatting logic
  return timey;
};

format.date.toTime = function (timey){
  // TODO: add more stripping and formatting logic
  return timey;
};

format.date.toSeconds = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.date.toMinutes = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.date.toHours = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.date.toDays = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.date.toMonths = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.date.toYears = function (timey){
    // TODO: add more stripping and formatting logic
    return timey;
  };

format.date.getDate = function (timey){
    return timey;
  };

format.date.getDay = function (timey){
    return timey;
  };

format.date.getFullYear = function (timey){
    return timey;
  };

format.date.getHours = function (timey){
    return timey;
  };

format.date.getMilliseconds = function (timey){
    return timey;
  };

format.date.getMinutes = function (timey){
    return timey;
  };

format.date.getMonth = function (timey){
    return timey;
  };

format.date.getSeconds = function (timey){
    return timey;
  };

format.date.getTime = function (timey){
    return timey;
  };

format.date.getTimezoneOffset = function (timey){
    return timey;
  };

format.date.getUTCDate = function (timey){
    return timey;
  };

format.date.getUTCDay = function (timey){
    return timey;
  };

format.date.getUTCFullYear = function (timey){
    return timey;
  };

format.date.getUTCHours = function (timey){
    return timey;
  };

format.date.getUTCMilliseconds = function (timey){
    return timey;
  };

format.date.getUTCMinutes = function (timey){
    return timey;
  };

format.date.getUTCMonth = function (timey){
    return timey;
  };

format.date.getUTCSeconds = function (timey){
    return timey;
  };

format.date.toTimeString = function (timey){
    return timey;
  };

format.date.toUTCString = function (timey){
    return timey;
  };

format.currency = {};
format.currency.toDollars = function (money){
  // TODO: add more stripping and formatting logic
  return money;
};

format.currency.toPennies = function (money){
    // TODO: add more stripping and formatting logic
    return money;
  };

format.currency.toNickels = function (money){
    // TODO: add more stripping and formatting logic
    return money;
  };

format.currency.toDimes = function (money){
    // TODO: add more stripping and formatting logic
    return money;
  };

format.currency.toQuarters = function (money){
    // TODO: add more stripping and formatting logic
    return money;
  };

format.currency.toEuros = function (money){
  // TODO: add more stripping and formatting logic
  return money;
};

format.currency.toCanadian = function (money){
  // TODO: add more stripping and formatting logic
  return money;
};
if(typeof exports != "undefined"){for(var prop in format){exports[prop] = format[prop];}}